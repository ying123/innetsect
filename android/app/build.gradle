def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//引用插件
apply plugin: 'seal'
def projectRoot = project.getRootProject().rootDir.absolutePath

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    //添加
    def manifestPath = [
            // for AAR of Release
            // see note below
            projectRoot + '/build-cache',
            projectRoot + '/rammus',
            // for AAR of SNAPSHOT
            projectRoot + '/app/build/intermediates/exploded-aar'
    ]

    //'android:theme'
    def removeAttrs = [
            'android:debuggable'
    ]

    def replaceValues = [
            'android:allowBackup'
    ]
    def sweepXmlns = [
            'android=\"http://schemas.android.com/apk/res/android\"'
    ]

    seal {
        enabled = true
        manifests = manifestPath

        appAttrs {
            enabled = true
            attrsShouldRemove = removeAttrs
        }

        appReplaceValues {
            enabled = true
            valuesShouldRemove = replaceValues
        }
        xmlnsSweep {
            enabled = true
            xmlnsShouldSweep = sweepXmlns
        }
    }


    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        // test: applicationId "net.m3.innersect"
        // release: 
         applicationId "net.innersect.pro"
       // applicationId "net.m3.innersect"
//        applicationId "net.innersect.pro"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                BAIDU_MAP_KEY : "Q07ulrG0wmUGKcKwtN6ChlafT8eBuEkX", /// 百度地图AK
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyPassword keystoreProperties['keyPassword']
        }
         

    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
